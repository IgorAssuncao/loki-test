loki:
  fullnameOverride: "loki"

  deploymentMode: SimpleScalable<->Distributed
  loki:
    migrate:
      fromDistributed:
        enabled: true
        memberlistService: loki-memberlist
    schemaConfig:
      configs:
        - from: 2024-04-01
          store: tsdb
          object_store: s3
          schema: v13
          index:
            prefix: loki_index_
            period: 24h
    tracing:
      enabled: true

    ingester:
      replicas: 3
      chunk_encoding: snappy
    querier:
      # Default is 4, if you have enough memory and CPU you can increase, reduce if OOMing
      max_concurrent: 4
      replicas: 3
      maxUnavailable: 2
    queryFrontend:
      replicas: 2
      maxUnavailable: 1
    queryScheduler:
      replicas: 2
    distributor:
      replicas: 3
      maxUnavailable: 2
    compactor:
      replicas: 1
    indexGateway:
      replicas: 2
      maxUnavailable: 1

    # optional experimental components
    bloomPlanner:
      replicas: 0
    bloomBuilder:
      replicas: 0
    bloomGateway:
      replicas: 0

    # Enable minio for storage
    minio:
      enabled: true

    # Zero out replica counts of other deployment modes
    backend:
      replicas: 0
    read:
      replicas: 0
    write:
      replicas: 0

    singleBinary:
      replicas: 0
#
#     readinessProbe:
#       httpGet:
#         path: /ready
#         port: http-metrics
#       initialDelaySeconds: 45
#     livenessProbe:
#       httpGet:
#         path: /ready
#         port: http-metrics
#       initialDelaySeconds: 45
#
#     storage:
#       bucketNames: 
#         chunks: dev-loki-blocks-chunks
#         ruler: dev-loki-blocks-ruler
#         admin: dev-loki-blocks-admin
#
#     schema_config:
#       configs:
#         - from: 2023-07-01
#           store: tsdb
#           schema: v12
#           index:
#             prefix: tsdb_index_
#             period: 24h
#
#     structuredConfig:
#       auth_enabled: true
#
#       # https://grafana.com/docs/loki/latest/configuration/#server
#       server:
#         log_level: info
#         log_source_ips_enabled: true
#         log_request_at_info_level_enabled: true
#         http_server_read_timeout: 600s
#         http_server_write_timeout: 600s
#
#       # https://grafana.com/docs/loki/latest/configuration/#ingester
#       ingester:
#         lifecycler:
#           ring:
#             replication_factor: 3
#
#       # https://grafana.com/docs/loki/latest/configuration/#ingester_client
#       ingester_client:
#         pool_config:
#           remote_timeout: 2s
#         grpc_client_config:
#           grpc_compression: "snappy"
#
#       # https://grafana.com/docs/loki/latest/configuration/#limits_config
#       limits_config:
#         query_timeout: 10m
#         enforce_metric_name: true
#         # Ingestion limits
#         ingestion_rate_strategy: "local" # The global limit is a multiple of N where N is number of distributor replicas
#         ingestion_rate_mb: 100
#         ingestion_burst_size_mb: 250
#         per_stream_rate_limit: 20MB
#         per_stream_rate_limit_burst: 40MB
#         # Query limits
#         max_query_parallelism: 256
#         split_queries_by_interval: 15m
#         # Retention
#         retention_period: 168h # 7 days
#         max_global_streams_per_user: 200000
#         deletion_mode: "filter-and-delete"
#         max_query_series: 10000
#
#       # https://grafana.com/docs/loki/latest/configuration/#schema_config
#       schema_config:
#         configs:
#           - from: 2023-07-01
#             store: tsdb
#             schema: v12
#             index:
#               prefix: tsdb_index_
#               period: 24h
#
#       # https://grafana.com/docs/loki/latest/configuration/#schema_config
#       storage_config:
#         tsdb_shipper:
#           active_index_directory: /var/loki/tsdb-index
#           cache_location: /var/loki/tsdb-cache
#           use_boltdb_shipper_as_backup: true
#           index_gateway_client:
#             server_address: dns:///loki-index-gateway:9095
#             log_gateway_requests: true
#             grpc_client_config:
#               grpc_compression: "snappy"
#           query_ready_num_days: 7
#         index_queries_cache_config:
#           memcached_client:
#             consistent_hash: true
#             timeout: 500ms # default = 100
#             max_idle_conns: 200 # default = 16
#
#       # https://grafana.com/docs/loki/latest/configuration/#chunk_store_config
#       chunk_store_config:
#         chunk_cache_config:
#           default_validity: 0s
#           memcached_client:
#             consistent_hash: true
#             timeout: 500ms # default = 100
#             max_idle_conns: 200 # default = 16
#         write_dedupe_cache_config:
#           memcached_client:
#             consistent_hash: true
#             timeout: 500ms # default = 100
#             max_idle_conns: 200 # default = 16
#
#       # https://grafana.com/docs/loki/latest/configuration/#table_manager
#       # don't use together with compactor
#       table_manager:
#         retention_deletes_enabled: false
#         retention_period: 0s
#
#       querier:
#         max_concurrent: 4 # Maximum concurrent tasks querier can serve. This should be aligned with frontend_worker.parallelism. Querier must have enough CPU capacity to handle this concurrency
#         multi_tenant_queries_enabled: true # enable federated queries
#
#       # https://grafana.com/docs/loki/latest/configuration/#query_range
#       query_range:
#         # split_queries_by_day: true
#         align_queries_with_step: true
#         cache_results: true
#         max_retries: 5
#         results_cache:
#           cache:
#             default_validity: 30m
#             memcached_client:
#               circuit_breaker_consecutive_failures: 0
#               consistent_hash: true
#               timeout: 500ms # default = 100
#               max_idle_conns: 200 # default = 16
#               max_item_size: 4194304 # 4MB
#               # This fixes issue with wrong memcached discovery
#               service: memcached-client
#
#       # https://grafana.com/docs/loki/latest/configuration/#query_scheduler
#       query_scheduler:
#         max_outstanding_requests_per_tenant: 32768
#         grpc_client_config:
#           grpc_compression: "snappy"
#         readinessProbe:
#           timeoutSeconds: 5
#         livenessProbe:
#           timeoutSeconds: 5
#
#       # https://grafana.com/docs/loki/latest/configuration/#frontend_worker
#       frontend_worker:
#         parallelism: 4 # Maximum number of tasks sent to one querier. Querier must have enough CPU capacity to handle these tasks
#         grpc_client_config:
#           grpc_compression: "snappy"
#
#       # https://grafana.com/docs/loki/latest/configuration/#frontend
#       frontend:
#         max_outstanding_per_tenant: 32768
#         log_queries_longer_than: 10s
#         compress_responses: true
#         grpc_client_config:
#           grpc_compression: "snappy"
#
#       # https://grafana.com/docs/loki/latest/configuration/#compactor
#       compactor:
#         retention_enabled: true
#         working_directory: /var/loki/compactor
#
#       compactor_grpc_client:
#         grpc_compression: "snappy"
#
#       # https://grafana.com/docs/loki/latest/configuration/#ruler
#       ruler:
#         # alertmanager_url: <alertmanager_endpoint>
#         # enable_alertmanager_v2: true
#         enable_api: true
#         enable_sharding: true
#         ring:
#           kvstore:
#             store: memberlist
#         rule_path: /tmp/loki/rules
#         remote_write:
#           enabled: true
#           clients:
#             mimir:
#               url: http://mimir-distributor-headless.mimir:8080/api/v1/push
#
#         wal:
#           dir: /var/loki/ruler-wal
#         ruler_client:
#           grpc_compression: "snappy"
#
#   runtimeConfig:
#     overrides:
#       "incubator-dev":
#         retention_period: 744h
#       "trading-dev":
#         retention_period: 744h
#
#   serviceAccount:
#     create: true
#     name: loki
#
#   # ingester StatefulSet
#   ingester:
#     replicas: 2
#     maxUnavailable: 1
#     readinessProbe:
#       timeoutSeconds: 5
#     livenessProbe:
#       timeoutSeconds: 5
#
#   # distributor Deployment
#   distributor:
#     replicas: 1
#     maxUnavailable: 0
#     readinessProbe:
#       timeoutSeconds: 5
#     livenessProbe:
#       timeoutSeconds: 5
#
#   # Querier deployment
#   querier:
#     replicas: 1
#     maxUnavailable: 0
#     readinessProbe:
#       timeoutSeconds: 5
#     livenessProbe:
#       timeoutSeconds: 5
#
#   # queryFrontend Deployment
#   queryFrontend:
#     replicas: 1
#     maxUnavailable: 0
#     readinessProbe:
#       timeoutSeconds: 5
#     livenessProbe:
#       timeoutSeconds: 5
#
#   query_scheduler:
#     enabled: true
#     replicas: 1
#     maxUnavailable: 0
#     readinessProbe:
#       timeoutSeconds: 5
#     livenessProbe:
#       timeoutSeconds: 5
#
#   # tableManager deployment
#   tableManager:
#     enabled: false
#
#   # Ingress - Don't use with gateways
#   ingress:
#     enabled: false
#
#   gateway:
#     enabled: true
#     replicas: 2
#     maxUnavailable: 1
#     verboseLogging: true
#     nginxConfig:
#       # -- Allows appending custom configuration to the server block
#       serverSnippet: |
#         proxy_read_timeout 600s;
#         proxy_send_timeout 600s;
#       # -- Allows appending custom configuration to the http block
#       httpSnippet: |-
#         map $status $loglevel {
#           default info;
#           "~100 TO 199"  info;
#           "~200 TO 299"  info;
#           "~300 TO 399"  info;
#           "~400 TO 499"  warn;
#           "~500 TO 599"  error;
#         }
#       logFormat: |-
#         main escape=json 'source=nginx time=$msec resp_body_size=$body_bytes_sent host="$http_host" '
#             'address=$remote_addr request_length=$request_length method=$request_method '
#             'uri="$request_uri" status=$status user_agent="$http_user_agent" resp_time=$request_time '
#             'upstream_addr="$upstream_addr" level="$loglevel"';
#
#   compactor:
#     enabled: true
#     persistence:
#       enabled: true
#       size: 200Gi
#
#   ruler:
#     enabled: true
#     kind: StatefulSet
#     replicas: 1
#     maxUnavailable: 0
#
#   indexGateway:
#     enabled: true
#     replicas: 1
#     maxUnavailable: 0
#     persistence:
#       enabled: true
#       size: 50Gi
#
#   memcached:
#     livenessProbe:
#       timeoutSeconds: 2
#
#   memcachedExporter:
#     enabled: true
#
#   memcachedChunks:
#     enabled: true
#     replicas: 1
#     maxUnavailable: 0
#
#   memcachedFrontend:
#     enabled: true
#     replicas: 1
#     maxUnavailable: 0
#
#   memcachedIndexQueries:
#     enabled: true
#     replicas: 1
#     maxUnavailable: 0
#
#   memcachedIndexWrites:
#     enabled: true
#     replicas: 1
#     maxUnavailable: 0
#
#   networkPolicy:
#     enabled: false
#
